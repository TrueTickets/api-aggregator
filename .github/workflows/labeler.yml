---
name: Automated Labeling

on:
    issues:
        types: [opened, edited]
    pull_request_target:
        types: [opened, edited, synchronize]

permissions:
    contents: read
    issues: write
    pull-requests: write

jobs:
    label-issues:
        name: Label Issues
        runs-on: ubuntu-latest
        if: github.event_name == 'issues'

        steps:
            - name: Label based on issue content
              uses: actions/github-script@v7
              with:
                  script: |
                      const issue = context.payload.issue;
                      const body = issue.body || '';
                      const title = issue.title || '';
                      const labels = [];

                      // Auto-label based on title and body content
                      if (title.toLowerCase().includes('[bug]') || body.toLowerCase().includes('bug')) {
                          labels.push('bug');
                      }

                      if (title.toLowerCase().includes('[feature]') || body.toLowerCase().includes('feature request')) {
                          labels.push('enhancement');
                      }

                      if (title.toLowerCase().includes('[docs]') || body.toLowerCase().includes('documentation')) {
                          labels.push('documentation');
                      }

                      if (title.toLowerCase().includes('[question]') || body.toLowerCase().includes('question')) {
                          labels.push('question');
                      }

                      // Area labels based on content
                      if (body.toLowerCase().includes('configuration') || body.toLowerCase().includes('config.yaml')) {
                          labels.push('area/config');
                      }

                      if (body.toLowerCase().includes('transformation') || body.toLowerCase().includes('filter') || body.toLowerCase().includes('mapping')) {
                          labels.push('area/transformation');
                      }

                      if (body.toLowerCase().includes('docker') || body.toLowerCase().includes('container')) {
                          labels.push('area/docker');
                      }

                      if (body.toLowerCase().includes('backend') || body.toLowerCase().includes('http client')) {
                          labels.push('area/client');
                      }

                      if (body.toLowerCase().includes('server') || body.toLowerCase().includes('endpoint')) {
                          labels.push('area/server');
                      }

                      if (body.toLowerCase().includes('tracing') || body.toLowerCase().includes('metrics') || body.toLowerCase().includes('telemetry')) {
                          labels.push('area/telemetry');
                      }

                      if (body.toLowerCase().includes('ci') || body.toLowerCase().includes('github actions') || body.toLowerCase().includes('workflow')) {
                          labels.push('area/ci-cd');
                      }

                      // Priority labels based on keywords
                      if (body.toLowerCase().includes('critical') || body.toLowerCase().includes('urgent') || body.toLowerCase().includes('production down')) {
                          labels.push('priority/critical');
                      } else if (body.toLowerCase().includes('high priority') || body.toLowerCase().includes('important')) {
                          labels.push('priority/high');
                      } else if (body.toLowerCase().includes('low priority') || body.toLowerCase().includes('nice to have')) {
                          labels.push('priority/low');
                      } else {
                          labels.push('priority/medium');
                      }

                      // Security labels
                      if (body.toLowerCase().includes('security') || body.toLowerCase().includes('vulnerability') || body.toLowerCase().includes('cve')) {
                          labels.push('security');
                      }

                      // Performance labels
                      if (body.toLowerCase().includes('performance') || body.toLowerCase().includes('slow') || body.toLowerCase().includes('timeout')) {
                          labels.push('performance');
                      }

                      // Add needs-triage to all new issues
                      labels.push('needs-triage');

                      // Apply labels if any were found
                      if (labels.length > 0) {
                          await github.rest.issues.addLabels({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              issue_number: issue.number,
                              labels: labels
                          });
                      }

    label-prs:
        name: Label Pull Requests
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request_target'

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  ref: ${{ github.event.pull_request.head.sha }}

            # Use the official labeler action for file-based labeling
            - name: Label PR based on files changed
              uses: actions/labeler@v5
              with:
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
                  configuration-path: .github/pr-labeler.yml

            # Custom script only for content analysis that labeler can't do
            - name: Label based on PR content and size
              uses: actions/github-script@v7
              with:
                  script: |
                      const pr = context.payload.pull_request;
                      const body = pr.body || '';
                      const title = pr.title || '';
                      const labels = [];

                      // Auto-label based on title prefix
                      if (title.startsWith('üêõ') || title.toLowerCase().includes('fix')) {
                          labels.push('bug');
                      }

                      if (title.startsWith('‚ú®') || title.toLowerCase().includes('feat')) {
                          labels.push('enhancement');
                      }

                      if (title.startsWith('üìö') || title.toLowerCase().includes('docs')) {
                          labels.push('documentation');
                      }

                      if (title.startsWith('üî®') || title.toLowerCase().includes('refactor')) {
                          labels.push('refactor');
                      }

                      if (title.startsWith('üß™') || title.toLowerCase().includes('test')) {
                          labels.push('test');
                      }

                      if (title.startsWith('üêé') || title.toLowerCase().includes('perf')) {
                          labels.push('performance');
                      }

                      if (title.startsWith('üîí') || title.toLowerCase().includes('security')) {
                          labels.push('security');
                      }

                      if (title.startsWith('üë∑') || title.toLowerCase().includes('ci')) {
                          labels.push('area/ci-cd');
                      }

                      if (title.startsWith('üê≥') || title.toLowerCase().includes('docker')) {
                          labels.push('area/docker');
                      }

                      if (title.startsWith('üîß') || title.toLowerCase().includes('config')) {
                          labels.push('area/config');
                      }

                      if (title.startsWith('‚¨Ü') || title.toLowerCase().includes('dep')) {
                          labels.push('dependencies');
                      }

                      // Breaking change detection
                      if (body.toLowerCase().includes('breaking change') || body.toLowerCase().includes('üí•')) {
                          labels.push('breaking-change');
                      }

                      // Size estimation based on lines changed
                      const additions = pr.additions || 0;
                      const deletions = pr.deletions || 0;
                      const totalChanges = additions + deletions;

                      if (totalChanges <= 50) {
                          labels.push('size/xs');
                      } else if (totalChanges <= 200) {
                          labels.push('size/s');
                      } else if (totalChanges <= 500) {
                          labels.push('size/m');
                      } else if (totalChanges <= 1000) {
                          labels.push('size/l');
                      } else {
                          labels.push('size/xl');
                      }

                      // Apply labels if any were found
                      if (labels.length > 0) {
                          await github.rest.issues.addLabels({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              issue_number: pr.number,
                              labels: labels
                          });
                      }
